<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ExampleSite</title>
    <link>https://examplesite.com/</link>
    <description>Recent content on ExampleSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 May 2024 09:54:21 +0800</lastBuildDate>
    <atom:link href="https://examplesite.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>16. 最接近的三数之和</title>
      <link>https://examplesite.com/leetcode-problems/3sum-closest/</link>
      <pubDate>Wed, 01 May 2024 09:54:21 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/3sum-closest/</guid>
      <description>题目 给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。
返回这三个数的和。
假定每组输入只存在恰好一个解。
示例 1：
输入：nums = [-1,2,1,-4], target = 1 输出：2 解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。 示例 2：
输入：nums = [0,0,0], target = 1 输出：0 提示：
3 &amp;lt;= nums.length &amp;lt;= 1000 -1000 &amp;lt;= nums[i] &amp;lt;= 1000 -104 &amp;lt;= target &amp;lt;= 104 解题思路 排序+双指针，和3Sum思路一样，只是求的是最接近target的三数之和，维护最接近的和ans和最小差值minDiff，当总和更靠近时更新ans和minDiff。
代码 func threeSumClosest(nums []int, target int) int { sort.</description>
    </item>
    <item>
      <title>15. 三数之和</title>
      <link>https://examplesite.com/leetcode-problems/3sum/</link>
      <pubDate>Mon, 29 Apr 2024 22:19:48 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/3sum/</guid>
      <description>题目 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
**注意：**答案中不可以包含重复的三元组。
示例 1：
输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 示例 2：</description>
    </item>
    <item>
      <title>双指针</title>
      <link>https://examplesite.com/leetcode-topics/two-pointers/</link>
      <pubDate>Sun, 28 Apr 2024 23:01:32 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-topics/two-pointers/</guid>
      <description> No. Title Difficulty Time Complexity Space Complexity 11 盛最多水的容器 Medium $O(n)$ $O(1)$ 15 三数之和 Medium $O(n^2)$ $O(n)$ 16 最接近的三数之和 Medium $O(n^2)$ $O(1)$ </description>
    </item>
    <item>
      <title>11. 盛最多水的容器</title>
      <link>https://examplesite.com/leetcode-problems/container-with-most-water/</link>
      <pubDate>Sun, 28 Apr 2024 22:20:30 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/container-with-most-water/</guid>
      <description>题目 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
示例 1：
输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例 2：
输入：height = [1,1] 输出：1 提示：
n == height.length 2 &amp;lt;= n &amp;lt;= 105 0 &amp;lt;= height[i] &amp;lt;= 104 解题思路 面积S = (j - i) * min(h[i], h[j]), j &amp;gt; i 在(1, n)中找出使面积S最大的(i, j)，最简单的方法就是遍历(i, j)的所有可能并比较所有面积。
发现以下规律
当h[i] &amp;lt; h[j]时，不需要计算(i, j-1), (i, j-2), &amp;hellip;，因为它们的面积一定小于(i, j)的面积，因为宽度变小，高度一定&amp;lt;=h[i]。所以下一步应该检查(i+1, j)的面积。 同理h[i] &amp;gt;= h[j]时，不需要计算(i+1, j), (i+2, j), &amp;hellip;， 所以下一步应该检查(i, j-1)的面积。 首尾对撞指针，每次高度较低的指针往中间移动，计算面积更新最大面积。</description>
    </item>
    <item>
      <title>Home Kit配对协议</title>
      <link>https://examplesite.com/posts/home-kit-paring/</link>
      <pubDate>Sat, 27 Apr 2024 11:16:11 +0800</pubDate>
      <guid>https://examplesite.com/posts/home-kit-paring/</guid>
      <description>SRP协议 SRP 是一种基于密码的相互身份验证的协议，要求双方都知道用户的密码。在身份验证过程中还生成了共享密钥，可通过对称加密来加密报文。
约定解释 N A large safe prime (N = 2q+1, where q is prime)，All arithmetic is done modulo N. g A generator modulo N k Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6) s User&amp;#39;s salt I Username p Cleartext Password H() One-way hash function ^ (Modular) Exponentiation u Random scrambling parameter a,b Secret ephemeral values A,B Public ephemeral values x Private key (derived from p and s) v Password verifier N 安全的大素数，所有的运算都是mod N g A generator modulo N k Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6) s 加盐，是一种随机产生的数据，用于保护密码的安全 I 用户名 p 明文密码 H() 单向哈希函数，不可逆 ^ 模幂运算，即求a^b mod n的值 u 随机混淆参数，用于增加安全性 a,b 秘密临时值，是随机生成的大整数 A,B 公开临时值，用于身份验证的过程中 x 私钥，由密码p和盐值s衍生而来 v 密码验证器，由g^x mod N计算得出，用于在服务器端验证用户的密码 生成和存储Password Verifier 通过以下公式生成password verifier，服务端将{I, s, v}存储到数据库，可通过索引键I获取该三元组。</description>
    </item>
    <item>
      <title>夏令时</title>
      <link>https://examplesite.com/posts/daylight-saving-time/</link>
      <pubDate>Wed, 24 Apr 2024 22:07:33 +0800</pubDate>
      <guid>https://examplesite.com/posts/daylight-saving-time/</guid>
      <description>夏令时是什么？ 夏令时英文叫Daylight Saving Time，简称DST。高纬度地区由于夏季太阳升起时间明显比冬季早，很多国家为了充分利用夏季的太阳光照，节约照明用电，在天亮早的夏季会人为将时间调快一小时，实行夏时制。而当冬季来临，这些国家会将时针再拨回原来的标准时间（Standard Time）。
美国夏令时一般在3月第二个周日凌晨2AM（当地时间）开始，将时钟调到3点，拨快1小时，俗称“Spring Forward 1 Hour”；而在11月第一个周日凌晨2AM（当地时间）夏令时结束，要将时钟调到1点，拨慢1小时，俗称“Fall Back 1 Hour”。
IANA时区 IANA Time Zone Database，是一组表示地球上各地的时间历史的代码和数据，由互联网号码分配机构（Internet Assigned Numbers Authority，IANA）维护。该数据库包含了全球各国的时间信息，包括时区边界、UTC（世界标准时间）和夏令时等规则。IANA会根据各地政体的变化而定期更新关于时区边界、UTC和夏令时等的规则。
zoneinfo是IANA Time Zone Database的一种格式，用于表示世界各个国家和地区的时区和夏令时信息。在 Linux 系统中中位于：/usr/share/zoneinfo，每个文件都对应着一个时区。这些文件的名称通常基于地理位置或国家名称，例如 America/New_York 和 Asia/Shanghai 等。
嵌入式设备通过 TZ环境变量指定时区。支持三种格式
std offset，当当地时区没有夏令时时使用，比如EST+5，指北美东部标准时间Eastern Standard Time与 UTC 的偏移量为 5 小时。
std offset dst [offset],start[/time],end[/time]，当有夏令时时使用，比如EST+5EDT,M3.2.0/2,M11.1.0/2，表示北美东部标准时间 (EST) 与 UTC 的正常偏移量为 5 小时。夏令时从 3 月的第二个星期日凌晨 2:00 开始，进入东部夏令时间 (EDT) ，到 11 月的第一个星期日凌晨 2:00 结束。
:characters，比如America/New_York，库会查找/usr/share/zoneinfo/America/New_York文件。
第1和第2种格式称为POSIX格式，第3种格式称为Olson格式。
如果嵌入式设备资源有限，无法引入整个时区数据库，可以采用POSIX格式，只采用最新的夏令时规则，历史的夏令时规则不管，缺点是历史时间用最新的夏令时规则解析会不对。
每个时区文件的最后一行就是时区偏移和最新的夏令时规则，POSIX格式，比如/usr/share/zoneinfo/America/New_York最后一行是EST5EDT,M3.2.0,M11.1.0
代码实现注意点 通信接口使用 UTC 并格式化为ISO 8601字符串，例如：2024-04-24T09:14:57Z。或者使用 Unix 时间，例如：1455821369。</description>
    </item>
    <item>
      <title>云存储订阅设计</title>
      <link>https://examplesite.com/posts/subscription/</link>
      <pubDate>Sat, 16 Mar 2024 12:44:03 +0800</pubDate>
      <guid>https://examplesite.com/posts/subscription/</guid>
      <description>需求 摄像头录像云存储套餐订阅，分月、年套餐，分基础版、高级版套餐，区别是最多可用设备数不同。 google play、app store内购采用升降级套餐，stripe、paypal平台采用购买多个套餐，用户可选择内购或stripe、paypal购买。 全球有4大区（us, eu, ap, cn），各区订阅不互通。 领域建模 套餐 // Plan 套餐 type Plan struct { Id int // 套餐id Names map[string]string // 各个语言的名称 Descriptions map[string]string // 各个语言的描述 PeriodInDays int // 有效天数 MaxDeviceCount int // 最多可用设备数 Products []Product // 各支付平台产品配置 } // Product 支付平台产品配置 type Product struct { Id string // 支付平台的产品id，google play、app store的product id，stripe的price id，paypal的plan id Platform Platform // 支付平台 Prices map[string]Price // 各个地区的价格 } // Platform 支付平台 type Platform string const ( PlatformGooglePlay Platform = &amp;#34;google_play&amp;#34; PlatformAppStore Platform = &amp;#34;app_store&amp;#34; PlatformStripe Platform = &amp;#34;stripe&amp;#34; PlatformPaypal Platform = &amp;#34;paypal&amp;#34; ) // Price 价格 type Price struct { CurrencyCode string // 货币编码 Value string // 数额 } 订阅 // Subscription 维护订阅的生命周期 type Subscription struct { Id string // 订阅id UserId string // 用户id PlanId string // 套餐id PendingPlanId string // 下一个周期变更的套餐id Platform Platform // 支付平台 Status SubscriptionStatus // 订阅状态 ExpiresAt time.</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>https://examplesite.com/posts/my-first-post/</link>
      <pubDate>Sat, 16 Mar 2024 12:00:54 +0800</pubDate>
      <guid>https://examplesite.com/posts/my-first-post/</guid>
      <description>Test, tesfdsfsddsfs</description>
    </item>
  </channel>
</rss>
