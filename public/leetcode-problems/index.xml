<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Leetcode-Problems on ExampleSite</title>
    <link>https://examplesite.com/leetcode-problems/</link>
    <description>Recent content in Leetcode-Problems on ExampleSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 May 2024 10:55:07 +0800</lastBuildDate>
    <atom:link href="https://examplesite.com/leetcode-problems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>31. 下一个排列</title>
      <link>https://examplesite.com/leetcode-problems/next-permutation/</link>
      <pubDate>Wed, 01 May 2024 10:55:07 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/next-permutation/</guid>
      <description>题目 整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。
例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。 而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。 给你一个整数数组 nums ，找出 nums 的下一个排列。
必须原地修改，只允许使用额外常数空间。
示例 1：
输入：nums = [1,2,3] 输出：[1,3,2] 示例 2：
输入：nums = [3,2,1] 输出：[1,2,3] 示例 3：
输入：nums = [1,1,5] 输出：[1,5,1] 提示：
1 &amp;lt;= nums.length &amp;lt;= 100 0 &amp;lt;= nums[i] &amp;lt;= 100 解题思路 如何找到下一个排列。下一个排列是找到一个大于当前排序的字典序，且变大的幅度最小。那么只能将较小的数与较大数做一次原地交换。并且较小数的下标要尽量靠右，较大数也要尽可能小。原地交换以后，还需要将较大数右边的区间按照升序重新排列。这样交换以后，才能生成下一个排列。以排列 [8,9,6,10,7,2] 为例：能找到的符合条件的一对「较小数」与「较大数」的组合为 6 与 7，满足「较小数」尽量靠右，而「较大数」尽可能小。当完成交换后排列变为 [8,9,7,10,6,2]，此时我们可以重排原本「较小数」右边的区间，变为 [8,9,7,2,6,10]。</description>
    </item>
    <item>
      <title>27. 移除元素</title>
      <link>https://examplesite.com/leetcode-problems/remove-element/</link>
      <pubDate>Wed, 01 May 2024 10:48:33 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/remove-element/</guid>
      <description>题目 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝 int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i &amp;lt; len; i++) { print(nums[i]); } 示例 1：
输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2] 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。 示例 2：</description>
    </item>
    <item>
      <title>26. 删除有序数组中的重复项</title>
      <link>https://examplesite.com/leetcode-problems/remove-duplicates-from-sorted-array/</link>
      <pubDate>Wed, 01 May 2024 10:38:09 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/remove-duplicates-from-sorted-array/</guid>
      <description>题目 给你一个 非严格递增排列 的数组 nums ，请你** 原地** 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。
考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：
更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。 返回 k 。 判题标准:
系统会用下面的代码来测试你的题解:
int[] nums = [...]; // 输入数组 int[] expectedNums = [...]; // 长度正确的期望答案 int k = removeDuplicates(nums); // 调用 assert k == expectedNums.length; for (int i = 0; i &amp;lt; k; i++) { assert nums[i] == expectedNums[i]; } 如果所有断言都通过，那么您的题解将被 通过。</description>
    </item>
    <item>
      <title>19. 删除链表的倒数第 N 个结点</title>
      <link>https://examplesite.com/leetcode-problems/remove-nth-node-from-end-of-list/</link>
      <pubDate>Wed, 01 May 2024 10:27:41 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/remove-nth-node-from-end-of-list/</guid>
      <description>题目 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
示例 1：
输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2：
输入：head = [1], n = 1 输出：[] 示例 3：
输入：head = [1,2], n = 1 输出：[1] 提示：
链表中结点的数目为 sz 1 &amp;lt;= sz &amp;lt;= 30 0 &amp;lt;= Node.val &amp;lt;= 100 1 &amp;lt;= n &amp;lt;= sz 解题思路 双指针，fast指针先走n步，再同时移动fast和slow，当fast到达尾节点时，slow就指向倒数第n个结点的前一个节点。 fast指针最终停在尾节点，所以循环条件判断用fast.Next != nil，而不是fast != nil。 有可能删除的是头节点，所以引入虚拟头部。
代码 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func removeNthFromEnd(head *ListNode, n int) *ListNode { dummy := &amp;amp;ListNode{Next: head} slow, fast := dummy, dummy for ; n &amp;gt; 0; n-- { fast = fast.</description>
    </item>
    <item>
      <title>18. 四数之和</title>
      <link>https://examplesite.com/leetcode-problems/4sum/</link>
      <pubDate>Wed, 01 May 2024 10:14:47 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/4sum/</guid>
      <description>题目 给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：
0 &amp;lt;= a, b, c, d &amp;lt; n a、b、c 和 d 互不相同 nums[a] + nums[b] + nums[c] + nums[d] == target 你可以按 任意顺序 返回答案 。
示例 1：
输入：nums = [1,0,-1,0,-2,2], target = 0 输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] 示例 2：
输入：nums = [2,2,2,2,2], target = 8 输出：[[2,2,2,2]] 提示：
1 &amp;lt;= nums.length &amp;lt;= 200 -109 &amp;lt;= nums[i] &amp;lt;= 109 -109 &amp;lt;= target &amp;lt;= 109 解题思路 方法一：排序+双指针，在3Sum的基础上多套一层循环。第一层循环固定第一个元素，第二层循环固定第二个元素，循环内部用对撞指针找出剩余两个元素。时间复杂度：$O(n^3)$，空间复杂度：$O(logn)$，取决于排序所需的空间。</description>
    </item>
    <item>
      <title>16. 最接近的三数之和</title>
      <link>https://examplesite.com/leetcode-problems/3sum-closest/</link>
      <pubDate>Wed, 01 May 2024 09:54:21 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/3sum-closest/</guid>
      <description>题目 给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。
返回这三个数的和。
假定每组输入只存在恰好一个解。
示例 1：
输入：nums = [-1,2,1,-4], target = 1 输出：2 解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。 示例 2：
输入：nums = [0,0,0], target = 1 输出：0 提示：
3 &amp;lt;= nums.length &amp;lt;= 1000 -1000 &amp;lt;= nums[i] &amp;lt;= 1000 -104 &amp;lt;= target &amp;lt;= 104 解题思路 排序+双指针，和3Sum思路一样，只是求的是最接近target的三数之和，维护最接近的和ans和最小差值minDiff，当总和更靠近时更新ans和minDiff。
代码 func threeSumClosest(nums []int, target int) int { sort.</description>
    </item>
    <item>
      <title>15. 三数之和</title>
      <link>https://examplesite.com/leetcode-problems/3sum/</link>
      <pubDate>Mon, 29 Apr 2024 22:19:48 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/3sum/</guid>
      <description>题目 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
**注意：**答案中不可以包含重复的三元组。
示例 1：
输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 示例 2：</description>
    </item>
    <item>
      <title>11. 盛最多水的容器</title>
      <link>https://examplesite.com/leetcode-problems/container-with-most-water/</link>
      <pubDate>Sun, 28 Apr 2024 22:20:30 +0800</pubDate>
      <guid>https://examplesite.com/leetcode-problems/container-with-most-water/</guid>
      <description>题目 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
示例 1：
输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例 2：
输入：height = [1,1] 输出：1 提示：
n == height.length 2 &amp;lt;= n &amp;lt;= 105 0 &amp;lt;= height[i] &amp;lt;= 104 解题思路 面积S = (j - i) * min(h[i], h[j]), j &amp;gt; i 在(1, n)中找出使面积S最大的(i, j)，最简单的方法就是遍历(i, j)的所有可能并比较所有面积。
发现以下规律
当h[i] &amp;lt; h[j]时，不需要计算(i, j-1), (i, j-2), .</description>
    </item>
  </channel>
</rss>
